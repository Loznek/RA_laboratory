# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Planet {
  id: ID!
  name: String
  residents(where: RaceWhereInput! = {}, orderBy: [RaceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RaceWhereUniqueInput): [Race!]
  residentsCount(where: RaceWhereInput! = {}): Int
  jediFrom(where: JediWhereInput! = {}, orderBy: [JediOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JediWhereUniqueInput): [Jedi!]
  jediFromCount(where: JediWhereInput! = {}): Int
  natives(where: RaceWhereInput! = {}, orderBy: [RaceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RaceWhereUniqueInput): [Race!]
  nativesCount(where: RaceWhereInput! = {}): Int
  surface: String
}

input PlanetWhereUniqueInput {
  id: ID
}

input PlanetWhereInput {
  AND: [PlanetWhereInput!]
  OR: [PlanetWhereInput!]
  NOT: [PlanetWhereInput!]
  id: IDFilter
  name: StringFilter
  residents: RaceManyRelationFilter
  jediFrom: JediManyRelationFilter
  natives: RaceManyRelationFilter
  surface: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input RaceManyRelationFilter {
  every: RaceWhereInput
  some: RaceWhereInput
  none: RaceWhereInput
}

input JediManyRelationFilter {
  every: JediWhereInput
  some: JediWhereInput
  none: JediWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input PlanetOrderByInput {
  id: OrderDirection
  name: OrderDirection
  surface: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PlanetUpdateInput {
  name: String
  residents: RaceRelateToManyForUpdateInput
  jediFrom: JediRelateToManyForUpdateInput
  natives: RaceRelateToManyForUpdateInput
  surface: String
}

input RaceRelateToManyForUpdateInput {
  disconnect: [RaceWhereUniqueInput!]
  set: [RaceWhereUniqueInput!]
  create: [RaceCreateInput!]
  connect: [RaceWhereUniqueInput!]
}

input JediRelateToManyForUpdateInput {
  disconnect: [JediWhereUniqueInput!]
  set: [JediWhereUniqueInput!]
  create: [JediCreateInput!]
  connect: [JediWhereUniqueInput!]
}

input PlanetUpdateArgs {
  where: PlanetWhereUniqueInput!
  data: PlanetUpdateInput!
}

input PlanetCreateInput {
  name: String
  residents: RaceRelateToManyForCreateInput
  jediFrom: JediRelateToManyForCreateInput
  natives: RaceRelateToManyForCreateInput
  surface: String
}

input RaceRelateToManyForCreateInput {
  create: [RaceCreateInput!]
  connect: [RaceWhereUniqueInput!]
}

input JediRelateToManyForCreateInput {
  create: [JediCreateInput!]
  connect: [JediWhereUniqueInput!]
}

type Jedi {
  id: ID!
  name: String
  birthPlanet: Planet
  race: Race
  birthYear: Int
  master: Jedi
  padawans(where: JediWhereInput! = {}, orderBy: [JediOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JediWhereUniqueInput): [Jedi!]
  padawansCount(where: JediWhereInput! = {}): Int
  lightSaber: String
}

input JediWhereUniqueInput {
  id: ID
}

input JediWhereInput {
  AND: [JediWhereInput!]
  OR: [JediWhereInput!]
  NOT: [JediWhereInput!]
  id: IDFilter
  name: StringFilter
  birthPlanet: PlanetWhereInput
  race: RaceWhereInput
  birthYear: IntNullableFilter
  master: JediWhereInput
  padawans: JediManyRelationFilter
  lightSaber: StringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input JediOrderByInput {
  id: OrderDirection
  name: OrderDirection
  birthYear: OrderDirection
  lightSaber: OrderDirection
}

input JediUpdateInput {
  name: String
  birthPlanet: PlanetRelateToOneForUpdateInput
  race: RaceRelateToOneForUpdateInput
  birthYear: Int
  master: JediRelateToOneForUpdateInput
  padawans: JediRelateToManyForUpdateInput
  lightSaber: String
}

input PlanetRelateToOneForUpdateInput {
  create: PlanetCreateInput
  connect: PlanetWhereUniqueInput
  disconnect: Boolean
}

input RaceRelateToOneForUpdateInput {
  create: RaceCreateInput
  connect: RaceWhereUniqueInput
  disconnect: Boolean
}

input JediRelateToOneForUpdateInput {
  create: JediCreateInput
  connect: JediWhereUniqueInput
  disconnect: Boolean
}

input JediUpdateArgs {
  where: JediWhereUniqueInput!
  data: JediUpdateInput!
}

input JediCreateInput {
  name: String
  birthPlanet: PlanetRelateToOneForCreateInput
  race: RaceRelateToOneForCreateInput
  birthYear: Int
  master: JediRelateToOneForCreateInput
  padawans: JediRelateToManyForCreateInput
  lightSaber: String
}

input PlanetRelateToOneForCreateInput {
  create: PlanetCreateInput
  connect: PlanetWhereUniqueInput
}

input RaceRelateToOneForCreateInput {
  create: RaceCreateInput
  connect: RaceWhereUniqueInput
}

input JediRelateToOneForCreateInput {
  create: JediCreateInput
  connect: JediWhereUniqueInput
}

type Race {
  id: ID!
  name: String
  origin_planet: Planet
  occupied_planets(where: PlanetWhereInput! = {}, orderBy: [PlanetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanetWhereUniqueInput): [Planet!]
  occupied_planetsCount(where: PlanetWhereInput! = {}): Int
}

input RaceWhereUniqueInput {
  id: ID
  name: String
}

input RaceWhereInput {
  AND: [RaceWhereInput!]
  OR: [RaceWhereInput!]
  NOT: [RaceWhereInput!]
  id: IDFilter
  name: StringFilter
  origin_planet: PlanetWhereInput
  occupied_planets: PlanetManyRelationFilter
}

input PlanetManyRelationFilter {
  every: PlanetWhereInput
  some: PlanetWhereInput
  none: PlanetWhereInput
}

input RaceOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input RaceUpdateInput {
  name: String
  origin_planet: PlanetRelateToOneForUpdateInput
  occupied_planets: PlanetRelateToManyForUpdateInput
}

input PlanetRelateToManyForUpdateInput {
  disconnect: [PlanetWhereUniqueInput!]
  set: [PlanetWhereUniqueInput!]
  create: [PlanetCreateInput!]
  connect: [PlanetWhereUniqueInput!]
}

input RaceUpdateArgs {
  where: RaceWhereUniqueInput!
  data: RaceUpdateInput!
}

input RaceCreateInput {
  name: String
  origin_planet: PlanetRelateToOneForCreateInput
  occupied_planets: PlanetRelateToManyForCreateInput
}

input PlanetRelateToManyForCreateInput {
  create: [PlanetCreateInput!]
  connect: [PlanetWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPlanet(data: PlanetCreateInput!): Planet
  createPlanets(data: [PlanetCreateInput!]!): [Planet]
  updatePlanet(where: PlanetWhereUniqueInput!, data: PlanetUpdateInput!): Planet
  updatePlanets(data: [PlanetUpdateArgs!]!): [Planet]
  deletePlanet(where: PlanetWhereUniqueInput!): Planet
  deletePlanets(where: [PlanetWhereUniqueInput!]!): [Planet]
  createJedi(data: JediCreateInput!): Jedi
  createJedis(data: [JediCreateInput!]!): [Jedi]
  updateJedi(where: JediWhereUniqueInput!, data: JediUpdateInput!): Jedi
  updateJedis(data: [JediUpdateArgs!]!): [Jedi]
  deleteJedi(where: JediWhereUniqueInput!): Jedi
  deleteJedis(where: [JediWhereUniqueInput!]!): [Jedi]
  createRace(data: RaceCreateInput!): Race
  createRaces(data: [RaceCreateInput!]!): [Race]
  updateRace(where: RaceWhereUniqueInput!, data: RaceUpdateInput!): Race
  updateRaces(data: [RaceUpdateArgs!]!): [Race]
  deleteRace(where: RaceWhereUniqueInput!): Race
  deleteRaces(where: [RaceWhereUniqueInput!]!): [Race]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  planets(where: PlanetWhereInput! = {}, orderBy: [PlanetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanetWhereUniqueInput): [Planet!]
  planet(where: PlanetWhereUniqueInput!): Planet
  planetsCount(where: PlanetWhereInput! = {}): Int
  jedis(where: JediWhereInput! = {}, orderBy: [JediOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JediWhereUniqueInput): [Jedi!]
  jedi(where: JediWhereUniqueInput!): Jedi
  jedisCount(where: JediWhereInput! = {}): Int
  races(where: RaceWhereInput! = {}, orderBy: [RaceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RaceWhereUniqueInput): [Race!]
  race(where: RaceWhereUniqueInput!): Race
  racesCount(where: RaceWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
