{"version":3,"sources":["../src/index.ts","../src/buildVariables.ts","../src/getFinalType.ts","../src/isList.ts","../src/buildGqlQuery.ts","../src/isRequired.ts","../src/getResponseParser.ts","../src/buildQuery.ts"],"sourcesContent":["import merge from 'lodash/merge';\nimport buildDataProvider, { BuildQueryFactory, Options } from 'ra-data-graphql';\nimport { DataProvider, Identifier } from 'ra-core';\n\nimport defaultBuildQuery from './buildQuery';\nconst defaultOptions = {\n    buildQuery: defaultBuildQuery,\n};\n\nexport const buildQuery = defaultBuildQuery;\n\nexport default (\n    options: Omit<Options, 'buildQuery'> & { buildQuery?: BuildQueryFactory }\n): Promise<DataProvider> => {\n    return buildDataProvider(merge({}, defaultOptions, options)).then(\n        defaultDataProvider => {\n            return {\n                ...defaultDataProvider,\n                // This provider does not support multiple deletions so instead we send multiple DELETE requests\n                // This can be optimized using the apollo-link-batch-http link\n                deleteMany: (resource, params) => {\n                    const { ids, ...otherParams } = params;\n                    return Promise.all(\n                        ids.map(id =>\n                            defaultDataProvider.delete(resource, {\n                                id,\n                                previousData: null,\n                                ...otherParams,\n                            })\n                        )\n                    ).then(results => {\n                        const data = results.reduce<Identifier[]>(\n                            (acc, { data }) => [...acc, data.id],\n                            []\n                        );\n\n                        return { data };\n                    });\n                },\n                // This provider does not support multiple deletions so instead we send multiple UPDATE requests\n                // This can be optimized using the apollo-link-batch-http link\n                updateMany: (resource, params) => {\n                    const { ids, data, ...otherParams } = params;\n                    return Promise.all(\n                        ids.map(id =>\n                            defaultDataProvider.update(resource, {\n                                id,\n                                data: data,\n                                previousData: null,\n                                ...otherParams,\n                            })\n                        )\n                    ).then(results => {\n                        const data = results.reduce<Identifier[]>(\n                            (acc, { data }) => [...acc, data.id],\n                            []\n                        );\n\n                        return { data };\n                    });\n                },\n            };\n        }\n    );\n};\n","/* eslint-disable default-case */\nimport {\n    IntrospectionField,\n    IntrospectionInputObjectType,\n    IntrospectionNamedTypeRef,\n    IntrospectionNonNullTypeRef,\n    IntrospectionType,\n} from 'graphql';\nimport {\n    GET_LIST,\n    GET_ONE,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    CREATE,\n    UPDATE,\n    DELETE,\n} from 'ra-core';\nimport { IntrospectionResult, IntrospectedResource } from 'ra-data-graphql';\n\nimport getFinalType from './getFinalType';\nimport isList from './isList';\n\nexport default (introspectionResults: IntrospectionResult) => (\n    resource: IntrospectedResource,\n    raFetchMethod: string,\n    params: any,\n    queryType: IntrospectionField\n) => {\n    const preparedParams = prepareParams(\n        params,\n        queryType,\n        introspectionResults\n    );\n\n    switch (raFetchMethod) {\n        case GET_LIST: {\n            return buildGetListVariables(introspectionResults)(\n                resource,\n                raFetchMethod,\n                preparedParams\n            );\n        }\n        case GET_MANY:\n            return {\n                filter: { ids: preparedParams.ids },\n            };\n        case GET_MANY_REFERENCE: {\n            let variables = buildGetListVariables(introspectionResults)(\n                resource,\n                raFetchMethod,\n                preparedParams\n            );\n\n            variables.filter = {\n                ...variables.filter,\n                [preparedParams.target]: preparedParams.id,\n            };\n\n            return variables;\n        }\n        case GET_ONE:\n        case DELETE:\n            return {\n                id: preparedParams.id,\n            };\n        case CREATE:\n        case UPDATE: {\n            return buildCreateUpdateVariables(\n                resource,\n                raFetchMethod,\n                preparedParams,\n                queryType\n            );\n        }\n    }\n};\n\nconst sanitizeValue = (type: IntrospectionType, value: any) => {\n    if (type.name === 'Int') {\n        return parseInt(value, 10);\n    }\n\n    if (type.name === 'Float') {\n        return parseFloat(value);\n    }\n\n    return value;\n};\n\nconst castType = (\n    value: any,\n    type: IntrospectionType | IntrospectionNonNullTypeRef\n) => {\n    const realType = type.kind === 'NON_NULL' ? type.ofType : type;\n    switch (\n        `${realType.kind}:${(realType as IntrospectionNamedTypeRef).name}`\n    ) {\n        case 'SCALAR:Int':\n            return Number(value);\n\n        case 'SCALAR:String':\n            return String(value);\n\n        case 'SCALAR:Boolean':\n            return Boolean(value);\n\n        default:\n            return value;\n    }\n};\n\nconst prepareParams = (\n    params: any,\n    queryType: Partial<IntrospectionField>,\n    introspectionResults: IntrospectionResult\n) => {\n    const result = {};\n\n    if (!params) {\n        return params;\n    }\n\n    Object.keys(params).forEach(key => {\n        const param = params[key];\n        let arg = null;\n\n        if (!param) {\n            result[key] = param;\n            return;\n        }\n\n        if (queryType && Array.isArray(queryType.args)) {\n            arg = queryType.args.find(item => item.name === key);\n        }\n\n        if (param instanceof File) {\n            result[key] = param;\n            return;\n        }\n\n        if (param instanceof Date) {\n            result[key] = param.toISOString();\n            return;\n        }\n\n        if (\n            param instanceof Object &&\n            !Array.isArray(param) &&\n            arg &&\n            arg.type.kind === 'INPUT_OBJECT'\n        ) {\n            const args = (introspectionResults.types.find(\n                item =>\n                    item.kind === arg.type.kind && item.name === arg.type.name\n            ) as IntrospectionInputObjectType).inputFields;\n            result[key] = prepareParams(param, { args }, introspectionResults);\n            return;\n        }\n\n        if (\n            param instanceof Object &&\n            !(param instanceof Date) &&\n            !Array.isArray(param)\n        ) {\n            result[key] = prepareParams(param, queryType, introspectionResults);\n            return;\n        }\n\n        if (!arg) {\n            result[key] = param;\n            return;\n        }\n\n        result[key] = castType(param, arg.type);\n    });\n\n    return result;\n};\n\nconst buildGetListVariables = (introspectionResults: IntrospectionResult) => (\n    resource: IntrospectedResource,\n    raFetchMethod: string,\n    params: any\n) => {\n    let variables: Partial<{\n        filter: { [key: string]: any };\n        page: number;\n        perPage: number;\n        sortField: string;\n        sortOrder: string;\n    }> = { filter: {} };\n    if (params.filter) {\n        variables.filter = Object.keys(params.filter).reduce((acc, key) => {\n            if (key === 'ids') {\n                return { ...acc, ids: params.filter[key] };\n            }\n\n            if (typeof params.filter[key] === 'object') {\n                const type = introspectionResults.types.find(\n                    t => t.name === `${resource.type.name}Filter`\n                );\n                const filterSome = (type as IntrospectionInputObjectType)?.inputFields?.find(\n                    t => t.name === `${key}_some`\n                );\n\n                if (filterSome) {\n                    const filter = Object.keys(params.filter[key]).reduce(\n                        (acc, k) => ({\n                            ...acc,\n                            [`${k}_in`]: params.filter[key][k],\n                        }),\n                        {}\n                    );\n                    return { ...acc, [`${key}_some`]: filter };\n                }\n            }\n\n            const parts = key.split('.');\n\n            if (parts.length > 1) {\n                if (parts[1] === 'id') {\n                    const type = introspectionResults.types.find(\n                        t => t.name === `${resource.type.name}Filter`\n                    );\n                    const filterSome = (type as IntrospectionInputObjectType)?.inputFields?.find(\n                        t => t.name === `${parts[0]}_some`\n                    );\n\n                    if (filterSome) {\n                        return {\n                            ...acc,\n                            [`${parts[0]}_some`]: { id: params.filter[key] },\n                        };\n                    }\n\n                    return { ...acc, [parts[0]]: { id: params.filter[key] } };\n                }\n\n                const resourceField = resource.type.fields.find(\n                    f => f.name === parts[0]\n                );\n                const type = getFinalType(resourceField.type);\n                return {\n                    ...acc,\n                    [key]: sanitizeValue(type, params.filter[key]),\n                };\n            }\n\n            const resourceField = resource.type.fields.find(\n                f => f.name === key\n            );\n\n            if (resourceField) {\n                const type = getFinalType(resourceField.type);\n                const isAList = isList(resourceField.type);\n\n                if (isAList) {\n                    return {\n                        ...acc,\n                        [key]: Array.isArray(params.filter[key])\n                            ? params.filter[key].map(value =>\n                                  sanitizeValue(type, value)\n                              )\n                            : sanitizeValue(type, [params.filter[key]]),\n                    };\n                }\n\n                return {\n                    ...acc,\n                    [key]: sanitizeValue(type, params.filter[key]),\n                };\n            }\n\n            return { ...acc, [key]: params.filter[key] };\n        }, {});\n    }\n\n    if (params.pagination) {\n        variables.page = parseInt(params.pagination.page, 10) - 1;\n        variables.perPage = parseInt(params.pagination.perPage, 10);\n    }\n\n    if (params.sort) {\n        variables.sortField = params.sort.field;\n        variables.sortOrder = params.sort.order;\n    }\n\n    return variables;\n};\n\nconst buildCreateUpdateVariables = (\n    resource: IntrospectedResource,\n    raFetchMethod,\n    { id, data }: any,\n    queryType: IntrospectionField\n) =>\n    Object.keys(data).reduce(\n        (acc, key) => {\n            if (Array.isArray(data[key])) {\n                const arg = queryType.args.find(a => a.name === `${key}Ids`);\n\n                if (arg) {\n                    return {\n                        ...acc,\n                        [`${key}Ids`]: data[key].map(({ id }) => id),\n                    };\n                }\n            }\n\n            if (typeof data[key] === 'object') {\n                const arg = queryType.args.find(a => a.name === `${key}Id`);\n\n                if (arg) {\n                    return {\n                        ...acc,\n                        [`${key}Id`]: data[key].id,\n                    };\n                }\n            }\n\n            return {\n                ...acc,\n                [key]: data[key],\n            };\n        },\n        { id }\n    );\n","import {\n    IntrospectionType,\n    IntrospectionTypeRef,\n    IntrospectionNonNullTypeRef,\n    TypeKind,\n} from 'graphql';\n\n/**\n * Ensure we get the real type even if the root type is NON_NULL or LIST\n * @param {GraphQLType} type\n */\nconst getFinalType = (\n    type: IntrospectionType | IntrospectionNonNullTypeRef | IntrospectionTypeRef\n) => {\n    if (type.kind === TypeKind.NON_NULL || type.kind === TypeKind.LIST) {\n        return getFinalType(type.ofType);\n    }\n\n    return type;\n};\n\nexport default getFinalType;\n","import {\n    IntrospectionType,\n    IntrospectionTypeRef,\n    IntrospectionNonNullTypeRef,\n    TypeKind,\n} from 'graphql';\n\nconst isList = (\n    type: IntrospectionType | IntrospectionNonNullTypeRef | IntrospectionTypeRef\n) => {\n    if (type.kind === TypeKind.NON_NULL) {\n        return isList(type.ofType);\n    }\n\n    return type.kind === TypeKind.LIST;\n};\n\nexport default isList;\n","import { GET_LIST, GET_MANY, GET_MANY_REFERENCE, DELETE } from 'ra-core';\nimport {\n    QUERY_TYPES,\n    IntrospectionResult,\n    IntrospectedResource,\n} from 'ra-data-graphql';\nimport {\n    ArgumentNode,\n    IntrospectionField,\n    IntrospectionInputValue,\n    IntrospectionNamedTypeRef,\n    IntrospectionObjectType,\n    IntrospectionUnionType,\n    TypeKind,\n    TypeNode,\n    VariableDefinitionNode,\n} from 'graphql';\nimport * as gqlTypes from 'graphql-ast-types-browser';\n\nimport getFinalType from './getFinalType';\nimport isList from './isList';\nimport isRequired from './isRequired';\n\nexport default (introspectionResults: IntrospectionResult) => (\n    resource: IntrospectedResource,\n    raFetchMethod: string,\n    queryType: IntrospectionField,\n    variables: any\n) => {\n    const { sortField, sortOrder, ...metaVariables } = variables;\n    const apolloArgs = buildApolloArgs(queryType, variables);\n    const args = buildArgs(queryType, variables);\n    const metaArgs = buildArgs(queryType, metaVariables);\n    const fields = buildFields(introspectionResults)(resource.type.fields);\n\n    if (\n        raFetchMethod === GET_LIST ||\n        raFetchMethod === GET_MANY ||\n        raFetchMethod === GET_MANY_REFERENCE\n    ) {\n        return gqlTypes.document([\n            gqlTypes.operationDefinition(\n                'query',\n                gqlTypes.selectionSet([\n                    gqlTypes.field(\n                        gqlTypes.name(queryType.name),\n                        gqlTypes.name('items'),\n                        args,\n                        null,\n                        gqlTypes.selectionSet(fields)\n                    ),\n                    gqlTypes.field(\n                        gqlTypes.name(`_${queryType.name}Meta`),\n                        gqlTypes.name('total'),\n                        metaArgs,\n                        null,\n                        gqlTypes.selectionSet([\n                            gqlTypes.field(gqlTypes.name('count')),\n                        ])\n                    ),\n                ]),\n                gqlTypes.name(queryType.name),\n                apolloArgs\n            ),\n        ]);\n    }\n\n    if (raFetchMethod === DELETE) {\n        return gqlTypes.document([\n            gqlTypes.operationDefinition(\n                'mutation',\n                gqlTypes.selectionSet([\n                    gqlTypes.field(\n                        gqlTypes.name(queryType.name),\n                        gqlTypes.name('data'),\n                        args,\n                        null,\n                        gqlTypes.selectionSet(fields)\n                    ),\n                ]),\n                gqlTypes.name(queryType.name),\n                apolloArgs\n            ),\n        ]);\n    }\n\n    return gqlTypes.document([\n        gqlTypes.operationDefinition(\n            QUERY_TYPES.includes(raFetchMethod) ? 'query' : 'mutation',\n            gqlTypes.selectionSet([\n                gqlTypes.field(\n                    gqlTypes.name(queryType.name),\n                    gqlTypes.name('data'),\n                    args,\n                    null,\n                    gqlTypes.selectionSet(fields)\n                ),\n            ]),\n            gqlTypes.name(queryType.name),\n            apolloArgs\n        ),\n    ]);\n};\n\nexport const buildFields = (\n    introspectionResults: IntrospectionResult,\n    paths = []\n) => fields =>\n    fields.reduce((acc, field) => {\n        const type = getFinalType(field.type);\n\n        if (type.name.startsWith('_')) {\n            return acc;\n        }\n\n        if (type.kind !== TypeKind.OBJECT && type.kind !== TypeKind.INTERFACE) {\n            return [...acc, gqlTypes.field(gqlTypes.name(field.name))];\n        }\n\n        const linkedResource = introspectionResults.resources.find(\n            r => r.type.name === type.name\n        );\n\n        if (linkedResource) {\n            return [\n                ...acc,\n                gqlTypes.field(\n                    gqlTypes.name(field.name),\n                    null,\n                    null,\n                    null,\n                    gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name('id'))])\n                ),\n            ];\n        }\n\n        const linkedType = introspectionResults.types.find(\n            t => t.name === type.name\n        );\n\n        if (linkedType && !paths.includes(linkedType.name)) {\n            const possibleTypes =\n                (linkedType as IntrospectionUnionType).possibleTypes || [];\n            return [\n                ...acc,\n                gqlTypes.field(\n                    gqlTypes.name(field.name),\n                    null,\n                    null,\n                    null,\n                    gqlTypes.selectionSet([\n                        ...buildFragments(introspectionResults)(possibleTypes),\n                        ...buildFields(introspectionResults, [\n                            ...paths,\n                            linkedType.name,\n                        ])((linkedType as IntrospectionObjectType).fields),\n                    ])\n                ),\n            ];\n        }\n\n        // NOTE: We might have to handle linked types which are not resources but will have to be careful about\n        // ending with endless circular dependencies\n        return acc;\n    }, []);\n\nexport const buildFragments = (introspectionResults: IntrospectionResult) => (\n    possibleTypes: readonly IntrospectionNamedTypeRef<IntrospectionObjectType>[]\n) =>\n    possibleTypes.reduce((acc, possibleType) => {\n        const type = getFinalType(possibleType);\n\n        const linkedType = introspectionResults.types.find(\n            t => t.name === type.name\n        );\n\n        return [\n            ...acc,\n            gqlTypes.inlineFragment(\n                gqlTypes.selectionSet(\n                    buildFields(introspectionResults)(\n                        (linkedType as IntrospectionObjectType).fields\n                    )\n                ),\n                gqlTypes.namedType(gqlTypes.name(type.name))\n            ),\n        ];\n    }, []);\n\nexport const buildArgs = (\n    query: IntrospectionField,\n    variables: any\n): ArgumentNode[] => {\n    if (query.args.length === 0) {\n        return [];\n    }\n\n    const validVariables = Object.keys(variables).filter(\n        k => typeof variables[k] !== 'undefined'\n    );\n    let args = query.args\n        .filter(a => validVariables.includes(a.name))\n        .reduce(\n            (acc, arg) => [\n                ...acc,\n                gqlTypes.argument(\n                    gqlTypes.name(arg.name),\n                    gqlTypes.variable(gqlTypes.name(arg.name))\n                ),\n            ],\n            []\n        );\n\n    return args;\n};\n\nexport const buildApolloArgs = (\n    query: IntrospectionField,\n    variables: any\n): VariableDefinitionNode[] => {\n    if (query.args.length === 0) {\n        return [];\n    }\n\n    const validVariables = Object.keys(variables).filter(\n        k => typeof variables[k] !== 'undefined'\n    );\n\n    let args = query.args\n        .filter(a => validVariables.includes(a.name))\n        .reduce((acc, arg) => {\n            return [\n                ...acc,\n                gqlTypes.variableDefinition(\n                    gqlTypes.variable(gqlTypes.name(arg.name)),\n                    getArgType(arg)\n                ),\n            ];\n        }, []);\n\n    return args;\n};\n\nexport const getArgType = (arg: IntrospectionInputValue): TypeNode => {\n    const type = getFinalType(arg.type);\n    const required = isRequired(arg.type);\n    const list = isList(arg.type);\n\n    if (list) {\n        if (required) {\n            return gqlTypes.listType(\n                gqlTypes.nonNullType(\n                    gqlTypes.namedType(gqlTypes.name(type.name))\n                )\n            );\n        }\n        return gqlTypes.listType(gqlTypes.namedType(gqlTypes.name(type.name)));\n    }\n\n    if (required) {\n        return gqlTypes.nonNullType(\n            gqlTypes.namedType(gqlTypes.name(type.name))\n        );\n    }\n\n    return gqlTypes.namedType(gqlTypes.name(type.name));\n};\n","import {\n    IntrospectionType,\n    IntrospectionListTypeRef,\n    IntrospectionTypeRef,\n    TypeKind,\n} from 'graphql';\n\nconst isRequired = (\n    type: IntrospectionType | IntrospectionListTypeRef | IntrospectionTypeRef\n) => {\n    if (type.kind === TypeKind.LIST) {\n        return isRequired(type.ofType);\n    }\n\n    return type.kind === TypeKind.NON_NULL;\n};\n\nexport default isRequired;\n","import { GET_LIST, GET_MANY, GET_MANY_REFERENCE } from 'ra-core';\nimport { IntrospectionResult, IntrospectedResource } from 'ra-data-graphql';\nimport { IntrospectionField } from 'graphql';\nimport { ApolloQueryResult } from '@apollo/client';\n\nexport default (introspectionResults: IntrospectionResult) => (\n    raFetchMethod: string,\n    resource: IntrospectedResource,\n    queryType: IntrospectionField\n) => (response: ApolloQueryResult<any>) => {\n    const data = response.data;\n\n    if (\n        raFetchMethod === GET_LIST ||\n        raFetchMethod === GET_MANY ||\n        raFetchMethod === GET_MANY_REFERENCE\n    ) {\n        return {\n            data: response.data.items.map(sanitizeResource),\n            total: response.data.total.count,\n        };\n    }\n\n    return { data: sanitizeResource(data.data) };\n};\n\nconst sanitizeResource = (data: any) => {\n    const result = Object.keys(data).reduce((acc, key) => {\n        if (key.startsWith('_')) {\n            return acc;\n        }\n\n        const dataForKey = data[key];\n\n        if (dataForKey === null || dataForKey === undefined) {\n            return acc;\n        }\n\n        if (Array.isArray(dataForKey)) {\n            if (typeof dataForKey[0] === 'object' && dataForKey[0] !== null) {\n                return {\n                    ...acc,\n                    [key]: dataForKey.map(sanitizeResource),\n                    [`${key}Ids`]: dataForKey.map(d => d.id),\n                };\n            } else {\n                return { ...acc, [key]: dataForKey };\n            }\n        }\n\n        if (typeof dataForKey === 'object' && dataForKey !== null) {\n            return {\n                ...acc,\n                ...(dataForKey &&\n                    dataForKey.id && {\n                        [`${key}.id`]: dataForKey.id,\n                    }),\n                // We should only sanitize gql types, not objects\n                [key]: dataForKey.__typename\n                    ? sanitizeResource(dataForKey)\n                    : dataForKey,\n            };\n        }\n\n        return { ...acc, [key]: dataForKey };\n    }, {});\n\n    return result;\n};\n","import { IntrospectionResult, BuildQuery } from 'ra-data-graphql';\nimport buildVariables from './buildVariables';\nimport buildGqlQuery from './buildGqlQuery';\nimport getResponseParser from './getResponseParser';\n\nexport const buildQueryFactory = (\n    buildVariablesImpl = buildVariables,\n    buildGqlQueryImpl = buildGqlQuery,\n    getResponseParserImpl = getResponseParser\n) => (introspectionResults: IntrospectionResult): BuildQuery => {\n    const knownResources = introspectionResults.resources.map(r => r.type.name);\n\n    const buildQuery: BuildQuery = (raFetchType, resourceName, params) => {\n        const resource = introspectionResults.resources.find(\n            r => r.type.name === resourceName\n        );\n\n        if (!resource) {\n            throw new Error(\n                `Unknown resource ${resourceName}. Make sure it has been declared on your server side schema. Known resources are ${knownResources.join(\n                    ', '\n                )}`\n            );\n        }\n\n        const queryType = resource[raFetchType];\n\n        if (!queryType) {\n            throw new Error(\n                `No query or mutation matching fetch type ${raFetchType} could be found for resource ${resource.type.name}`\n            );\n        }\n\n        const variables = buildVariablesImpl(introspectionResults)(\n            resource,\n            raFetchType,\n            params,\n            queryType\n        );\n        const query = buildGqlQueryImpl(introspectionResults)(\n            resource,\n            raFetchType,\n            queryType,\n            variables\n        );\n        const parseResponse = getResponseParserImpl(introspectionResults)(\n            raFetchType,\n            resource,\n            queryType\n        );\n\n        return {\n            query,\n            variables,\n            parseResponse,\n        };\n    };\n\n    return buildQuery;\n};\n\nexport default buildQueryFactory(\n    buildVariables,\n    buildGqlQuery,\n    getResponseParser\n);\n"],"mappings":"uuCAAA,oDAAA,OAAkB,2BAClB,GAA8D,8BCO9D,MAQO,mBChBP,MAKO,mBAMD,EAAe,EACjB,GAEI,EAAK,OAAS,WAAS,UAAY,EAAK,OAAS,WAAS,KACnD,EAAa,EAAK,QAGtB,EAPU,gBAUd,EAAQ,ECrBf,MAKO,mBAED,EAAS,EACX,GAEI,EAAK,OAAS,WAAS,SAChB,EAAO,EAAK,QAGhB,EAAK,OAAS,WAAS,KAPnB,UAUR,EAAQ,EFKf,GAAO,GAAQ,EAAC,GAA8C,CAC1D,EACA,EACA,EACA,IACC,CACD,GAAM,GAAiB,EACnB,EACA,EACA,GAGJ,OAAQ,OACC,YACD,MAAO,GAAsB,GACzB,EACA,EACA,OAGH,YACD,MAAO,CACH,OAAQ,CAAE,IAAK,EAAe,UAEjC,sBAAoB,CACrB,GAAI,GAAY,EAAsB,GAClC,EACA,EACA,GAGJ,SAAU,OAAS,OACZ,EAAU,QADE,EAEd,EAAe,QAAS,EAAe,KAGrC,MAEN,eACA,UACD,MAAO,CACH,GAAI,EAAe,QAEtB,cACA,UACD,MAAO,IACH,EACA,EACA,EACA,KAjDD,WAuDT,EAAgB,GAAC,EAAyB,IACxC,EAAK,OAAS,MACP,SAAS,EAAO,IAGvB,EAAK,OAAS,QACP,WAAW,GAGf,EATW,iBAYhB,GAAW,GACb,EACA,IACC,CACD,GAAM,GAAW,EAAK,OAAS,WAAa,EAAK,OAAS,EAC1D,OACI,GAAG,EAAS,QAAS,EAAuC,YAEvD,aACD,MAAO,QAAO,OAEb,gBACD,MAAO,QAAO,OAEb,iBACD,MAAO,SAAQ,WAGf,MAAO,KAlBF,YAsBX,EAAgB,GAClB,EACA,EACA,IACC,CACD,GAAM,GAAS,GAEf,MAAK,IAIL,QAAO,KAAK,GAAQ,QAAQ,GAAO,CAC/B,GAAM,GAAQ,EAAO,GACjB,EAAM,KAEV,GAAI,CAAC,EAAO,CACR,EAAO,GAAO,EACd,OAOJ,GAJI,GAAa,MAAM,QAAQ,EAAU,OACrC,GAAM,EAAU,KAAK,KAAK,GAAQ,EAAK,OAAS,IAGhD,YAAiB,MAAM,CACvB,EAAO,GAAO,EACd,OAGJ,GAAI,YAAiB,MAAM,CACvB,EAAO,GAAO,EAAM,cACpB,OAGJ,GACI,YAAiB,SACjB,CAAC,MAAM,QAAQ,IACf,GACA,EAAI,KAAK,OAAS,eACpB,CACE,GAAM,GAAQ,EAAqB,MAAM,KACrC,GACI,EAAK,OAAS,EAAI,KAAK,MAAQ,EAAK,OAAS,EAAI,KAAK,MAC3B,YACnC,EAAO,GAAO,EAAc,EAAO,CAAE,QAAQ,GAC7C,OAGJ,GACI,YAAiB,SACjB,CAAE,aAAiB,QACnB,CAAC,MAAM,QAAQ,GACjB,CACE,EAAO,GAAO,EAAc,EAAO,EAAW,GAC9C,OAGJ,GAAI,CAAC,EAAK,CACN,EAAO,GAAO,EACd,OAGJ,EAAO,GAAO,GAAS,EAAO,EAAI,QAG/B,IAjEW,iBAoEhB,EAAwB,EAAC,GAA8C,CACzE,EACA,EACA,IACC,CACD,GAAI,GAMC,CAAE,OAAQ,IACf,MAAI,GAAO,QACP,GAAU,OAAS,OAAO,KAAK,EAAO,QAAQ,OAAO,CAAC,EAAK,IAAQ,CAhM3E,QAiMY,GAAI,IAAQ,MACR,MAAO,QAAK,GAAL,CAAU,IAAK,EAAO,OAAO,KAGxC,GAAI,MAAO,GAAO,OAAO,IAAS,SAAU,CACxC,GAAM,GAAO,EAAqB,MAAM,KACpC,GAAK,EAAE,OAAS,GAAG,EAAS,KAAK,cAMrC,GAJoB,oBAAuC,cAAvC,cAAoD,KACpE,GAAK,EAAE,OAAS,GAAG,UAGP,CACZ,GAAM,GAAS,OAAO,KAAK,EAAO,OAAO,IAAM,OAC3C,CAAC,EAAK,IAAO,OACN,GADM,EAER,GAAG,QAAS,EAAO,OAAO,GAAK,KAEpC,IAEJ,MAAO,QAAK,GAAL,EAAW,GAAG,UAAa,KAI1C,GAAM,GAAQ,EAAI,MAAM,KAExB,GAAI,EAAM,OAAS,EAAG,CAClB,GAAI,EAAM,KAAO,KAAM,CACnB,GAAM,GAAO,EAAqB,MAAM,KACpC,GAAK,EAAE,OAAS,GAAG,EAAS,KAAK,cAMrC,MAJoB,qBAAuC,cAAvC,cAAoD,KACpE,GAAK,EAAE,OAAS,GAAG,EAAM,YAIlB,OACA,GADA,EAEF,GAAG,EAAM,WAAY,CAAE,GAAI,EAAO,OAAO,MAI3C,OAAK,GAAL,EAAW,EAAM,IAAK,CAAE,GAAI,EAAO,OAAO,MAGrD,GAAM,GAAgB,EAAS,KAAK,OAAO,KACvC,GAAK,EAAE,OAAS,EAAM,IAEpB,EAAO,EAAa,EAAc,MACxC,MAAO,QACA,GADA,EAEF,GAAM,EAAc,EAAM,EAAO,OAAO,MAIjD,GAAM,GAAgB,EAAS,KAAK,OAAO,KACvC,GAAK,EAAE,OAAS,GAGpB,GAAI,EAAe,CACf,GAAM,GAAO,EAAa,EAAc,MAGxC,MAFgB,GAAO,EAAc,MAG1B,OACA,GADA,EAEF,GAAM,MAAM,QAAQ,EAAO,OAAO,IAC7B,EAAO,OAAO,GAAK,IAAI,GACnB,EAAc,EAAM,IAExB,EAAc,EAAM,CAAC,EAAO,OAAO,OAI1C,OACA,GADA,EAEF,GAAM,EAAc,EAAM,EAAO,OAAO,MAIjD,MAAO,QAAK,GAAL,EAAW,GAAM,EAAO,OAAO,MACvC,KAGH,EAAO,YACP,GAAU,KAAO,SAAS,EAAO,WAAW,KAAM,IAAM,EACxD,EAAU,QAAU,SAAS,EAAO,WAAW,QAAS,KAGxD,EAAO,MACP,GAAU,UAAY,EAAO,KAAK,MAClC,EAAU,UAAY,EAAO,KAAK,OAG/B,GA5GmB,yBA+GxB,GAA6B,GAC/B,EACA,EACA,CAAE,KAAI,QACN,IAEA,OAAO,KAAK,GAAM,OACd,CAAC,EAAK,IACE,MAAM,QAAQ,EAAK,KACP,EAAU,KAAK,KAAK,GAAK,EAAE,OAAS,GAAG,QAGxC,OACA,GADA,EAEF,GAAG,QAAW,EAAK,GAAK,IAAI,CAAC,CAAE,QAAS,KAKjD,MAAO,GAAK,IAAS,UACT,EAAU,KAAK,KAAK,GAAK,EAAE,OAAS,GAAG,OAGxC,OACA,GADA,EAEF,GAAG,OAAU,EAAK,GAAK,KAK7B,OACA,GADA,EAEF,GAAM,EAAK,KAGpB,CAAE,OAnCyB,8BGlSnC,MAA+D,mBAC/D,EAIO,2BACP,EAUO,mBACP,EAA0B,wCCjB1B,MAKO,mBAED,EAAa,EACf,GAEI,EAAK,OAAS,WAAS,KAChB,EAAW,EAAK,QAGpB,EAAK,OAAS,WAAS,SAPf,cAUZ,EAAQ,EDMf,GAAO,GAAQ,EAAC,GAA8C,CAC1D,EACA,EACA,EACA,IACC,CACD,GAAmD,KAA3C,aAAW,aAAgC,EAAlB,IAAkB,EAAlB,CAAzB,YAAW,cACb,EAAa,GAAgB,EAAW,GACxC,EAAO,EAAU,EAAW,GAC5B,EAAW,EAAU,EAAW,GAChC,EAAS,EAAY,GAAsB,EAAS,KAAK,QAE/D,MACI,KAAkB,YAClB,IAAkB,YAClB,IAAkB,qBAEX,AAAS,WAAS,CACrB,AAAS,sBACL,QACA,AAAS,eAAa,CAClB,AAAS,QACL,AAAS,OAAK,EAAU,MACxB,AAAS,OAAK,SACd,EACA,KACA,AAAS,eAAa,IAE1B,AAAS,QACL,AAAS,OAAK,IAAI,EAAU,YAC5B,AAAS,OAAK,SACd,EACA,KACA,AAAS,eAAa,CAClB,AAAS,QAAM,AAAS,OAAK,eAIzC,AAAS,OAAK,EAAU,MACxB,KAKR,IAAkB,SACX,AAAS,WAAS,CACrB,AAAS,sBACL,WACA,AAAS,eAAa,CAClB,AAAS,QACL,AAAS,OAAK,EAAU,MACxB,AAAS,OAAK,QACd,EACA,KACA,AAAS,eAAa,MAG9B,AAAS,OAAK,EAAU,MACxB,KAKL,AAAS,WAAS,CACrB,AAAS,sBACL,cAAY,SAAS,GAAiB,QAAU,WAChD,AAAS,eAAa,CAClB,AAAS,QACL,AAAS,OAAK,EAAU,MACxB,AAAS,OAAK,QACd,EACA,KACA,AAAS,eAAa,MAG9B,AAAS,OAAK,EAAU,MACxB,MA5EG,WAiFF,EAAc,GACvB,EACA,EAAQ,KACP,GACD,EAAO,OAAO,CAAC,EAAK,IAAU,CAC1B,GAAM,GAAO,EAAa,EAAM,MAEhC,GAAI,EAAK,KAAK,WAAW,KACrB,MAAO,GAGX,GAAI,EAAK,OAAS,WAAS,QAAU,EAAK,OAAS,WAAS,UACxD,MAAO,CAAC,GAAG,EAAK,AAAS,QAAM,AAAS,OAAK,EAAM,QAOvD,GAJuB,EAAqB,UAAU,KAClD,GAAK,EAAE,KAAK,OAAS,EAAK,MAI1B,MAAO,CACH,GAAG,EACH,AAAS,QACL,AAAS,OAAK,EAAM,MACpB,KACA,KACA,KACA,AAAS,eAAa,CAAC,AAAS,QAAM,AAAS,OAAK,WAKhE,GAAM,GAAa,EAAqB,MAAM,KAC1C,GAAK,EAAE,OAAS,EAAK,MAGzB,GAAI,GAAc,CAAC,EAAM,SAAS,EAAW,MAAO,CAChD,GAAM,GACD,EAAsC,eAAiB,GAC5D,MAAO,CACH,GAAG,EACH,AAAS,QACL,AAAS,OAAK,EAAM,MACpB,KACA,KACA,KACA,AAAS,eAAa,CAClB,GAAG,GAAe,GAAsB,GACxC,GAAG,EAAY,EAAsB,CACjC,GAAG,EACH,EAAW,OACX,EAAuC,YAQ3D,MAAO,IACR,IA5DoB,eA8Dd,GAAiB,EAAC,GAA8C,AACzE,GAEA,EAAc,OAAO,CAAC,EAAK,IAAiB,CACxC,GAAM,GAAO,EAAa,GAEpB,EAAa,EAAqB,MAAM,KAC1C,GAAK,EAAE,OAAS,EAAK,MAGzB,MAAO,CACH,GAAG,EACH,AAAS,iBACL,AAAS,eACL,EAAY,GACP,EAAuC,SAGhD,AAAS,YAAU,AAAS,OAAK,EAAK,UAG/C,IArBuB,kBAuBjB,EAAY,GACrB,EACA,IACiB,CACjB,GAAI,EAAM,KAAK,SAAW,EACtB,MAAO,GAGX,GAAM,GAAiB,OAAO,KAAK,GAAW,OAC1C,GAAK,MAAO,GAAU,IAAO,aAejC,MAbW,GAAM,KACZ,OAAO,GAAK,EAAe,SAAS,EAAE,OACtC,OACG,CAAC,EAAK,IAAQ,CACV,GAAG,EACH,AAAS,WACL,AAAS,OAAK,EAAI,MAClB,AAAS,WAAS,AAAS,OAAK,EAAI,SAG5C,KArBa,aA2BZ,GAAkB,GAC3B,EACA,IAC2B,CAC3B,GAAI,EAAM,KAAK,SAAW,EACtB,MAAO,GAGX,GAAM,GAAiB,OAAO,KAAK,GAAW,OAC1C,GAAK,MAAO,GAAU,IAAO,aAejC,MAZW,GAAM,KACZ,OAAO,GAAK,EAAe,SAAS,EAAE,OACtC,OAAO,CAAC,EAAK,IACH,CACH,GAAG,EACH,AAAS,qBACL,AAAS,WAAS,AAAS,OAAK,EAAI,OACpC,GAAW,KAGpB,KAtBoB,mBA2BlB,GAAa,EAAC,GAA2C,CAClE,GAAM,GAAO,EAAa,EAAI,MACxB,EAAW,EAAW,EAAI,MAGhC,MAFa,GAAO,EAAI,MAGhB,EACO,AAAS,WACZ,AAAS,cACL,AAAS,YAAU,AAAS,OAAK,EAAK,SAI3C,AAAS,WAAS,AAAS,YAAU,AAAS,OAAK,EAAK,QAG/D,EACO,AAAS,cACZ,AAAS,YAAU,AAAS,OAAK,EAAK,QAIvC,AAAS,YAAU,AAAS,OAAK,EAAK,QAtBvB,cEnP1B,MAAuD,mBAKhD,EAAQ,EAAC,GAA8C,CAC1D,EACA,EACA,IACC,AAAC,GAAqC,CACvC,GAAM,GAAO,EAAS,KAEtB,MACI,KAAkB,YAClB,IAAkB,YAClB,IAAkB,qBAEX,CACH,KAAM,EAAS,KAAK,MAAM,IAAI,GAC9B,MAAO,EAAS,KAAK,MAAM,OAI5B,CAAE,KAAM,EAAiB,EAAK,QAlB1B,WAqBT,EAAmB,EAAC,GACP,OAAO,KAAK,GAAM,OAAO,CAAC,EAAK,IAAQ,CAClD,GAAI,EAAI,WAAW,KACf,MAAO,GAGX,GAAM,GAAa,EAAK,GAExB,MAAI,IAAe,KACR,EAGP,MAAM,QAAQ,GACV,MAAO,GAAW,IAAO,UAAY,EAAW,KAAO,KAChD,OACA,GADA,EAEF,GAAM,EAAW,IAAI,IACrB,GAAG,QAAW,EAAW,IAAI,GAAK,EAAE,MAGlC,OAAK,GAAL,EAAW,GAAM,IAI5B,MAAO,IAAe,UAAY,IAAe,KAC1C,SACA,GACC,GACA,EAAW,IAAM,EACZ,GAAG,QAAW,EAAW,KAJ/B,EAOF,GAAM,EAAW,WACZ,EAAiB,GACjB,IAIP,OAAK,GAAL,EAAW,GAAM,KACzB,IAvCkB,oBCrBlB,GAAM,IAAoB,GAC7B,EAAqB,EACrB,EAAoB,EACpB,EAAwB,IACvB,AAAC,GAA0D,CAC5D,GAAM,GAAiB,EAAqB,UAAU,IAAI,GAAK,EAAE,KAAK,MAgDtE,MA9C+B,IAAC,EAAa,EAAc,IAAW,CAClE,GAAM,GAAW,EAAqB,UAAU,KAC5C,GAAK,EAAE,KAAK,OAAS,GAGzB,GAAI,CAAC,EACD,KAAM,IAAI,OACN,oBAAoB,qFAAgG,EAAe,KAC/H,SAKZ,GAAM,GAAY,EAAS,GAE3B,GAAI,CAAC,EACD,KAAM,IAAI,OACN,4CAA4C,iCAA2C,EAAS,KAAK,QAI7G,GAAM,GAAY,EAAmB,GACjC,EACA,EACA,EACA,GAEE,EAAQ,EAAkB,GAC5B,EACA,EACA,EACA,GAEE,EAAgB,EAAsB,GACxC,EACA,EACA,GAGJ,MAAO,CACH,QACA,YACA,kBA1CuB,eAPF,qBAwD1B,EAAQ,GACX,EACA,EACA,GP3DJ,GAAM,IAAiB,CACnB,WAAY,GAGH,GAAa,EAEnB,GAAQ,EACX,GAEO,eAAkB,eAAM,GAAI,GAAgB,IAAU,KACzD,GACW,OACA,GADA,CAIH,WAAY,CAAC,EAAU,IAAW,CAC9B,GAAgC,KAAxB,QAAwB,EAAhB,IAAgB,EAAhB,CAAR,QACR,MAAO,SAAQ,IACX,EAAI,IAAI,GACJ,EAAoB,OAAO,EAAU,GACjC,KACA,aAAc,MACX,MAGb,KAAK,GAMI,EAAE,KALI,EAAQ,OACjB,CAAC,EAAK,CAAE,UAAW,CAAC,GAAG,EAAK,EAAK,IACjC,QAQZ,WAAY,CAAC,EAAU,IAAW,CAC9B,GAAsC,KAA9B,OAAK,QAAyB,EAAhB,IAAgB,EAAhB,CAAd,MAAK,SACb,MAAO,SAAQ,IACX,EAAI,IAAI,GACJ,EAAoB,OAAO,EAAU,GACjC,KACA,KAAM,EACN,aAAc,MACX,MAGb,KAAK,GAMI,EAAE,KALI,EAAQ,OACjB,CAAC,EAAK,CAAE,UAAW,CAAC,GAAG,EAAK,EAAK,IACjC,WA5Cb","names":[]}